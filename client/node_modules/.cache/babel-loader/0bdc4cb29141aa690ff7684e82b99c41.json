{"ast":null,"code":"var _jsxFileName = \"/Users/andrioljaupaj/Desktop/chat-app/client/src/components/chat/chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport ReactScrollableFeed from \"react-scrollable-feed\";\nimport \"./chat.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet socket;\nconst CONNECTION = \"localhost:8080/\";\n\nfunction Chat() {\n  _s();\n\n  console.log();\n  const [isLoggedIn, setIsloggedIn] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const [userInfo, setUserInfo] = useState({});\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    socket = io(CONNECTION);\n  }, [CONNECTION]);\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      console.log(data);\n      setMessageList([...messageList, data]);\n    });\n  }, []);\n\n  const roomConnection = () => {\n    socket.emit(\"join\", room, userInfo.username);\n    console.log(room, messageList, userInfo.username);\n    setIsloggedIn(true);\n  };\n\n  const sendMessage = async () => {\n    let messageContent = {\n      room: room,\n      content: {\n        username: userInfo.username,\n        message: message,\n        owner: userInfo\n      }\n    }; // send message\n\n    await socket.emit(\"send_message\", messageContent);\n    setMessageList([...messageList, messageContent.content]);\n  }; //receive message\n  // const getMessage = async () => {\n  //   const response = await fetch(\"http://localhost:8080/message\");\n  //   const messages = await response.json();\n  //   console.log(messages);\n  //   setMessages(messages);\n  // };\n\n\n  console.log(messages);\n  const authToken = sessionStorage.getItem(\"authToken\");\n  const reqOptions = {\n    headers: {\n      authorization: `Bearer ${authToken}`\n    }\n  }; // const getProfile = async () => {\n  //   const response = await fetch(\n  //     \"http://localhost:8080/user/profile\",\n  //     reqOptions\n  //   );\n  //   const userInfo = await response.json();\n  //   setUserInfo(userInfo);\n  // };\n  //useEffect(() => {\n  // getProfile();\n  //getMessage();\n  //}, []);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logIn\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Name...\",\n            onChange: e => {\n              setUsername(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Room...\",\n            onChange: e => {\n              setRoom(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectToRoom,\n          children: \"Enter Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: messageList.map((val, key) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"messageContainer\",\n              id: val.username == username ? \"You\" : \"Other\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"messageIndividual\",\n                children: [val.username, \": \", val.message]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messageInputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Message...\",\n            onChange: e => {\n              setMessage(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Chat, \"bLHyz2Hva57Okgnm+16JksFAo+M=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/andrioljaupaj/Desktop/chat-app/client/src/components/chat/chat.js"],"names":["React","useState","useEffect","io","ReactScrollableFeed","socket","CONNECTION","Chat","console","log","isLoggedIn","setIsloggedIn","room","setRoom","message","setMessage","username","setUsername","messageList","setMessageList","userInfo","setUserInfo","messages","setMessages","on","data","roomConnection","emit","sendMessage","messageContent","content","owner","authToken","sessionStorage","getItem","reqOptions","headers","authorization","e","target","value","connectToRoom","map","val","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport ReactScrollableFeed from \"react-scrollable-feed\";\nimport \"./chat.scss\";\nlet socket;\nconst CONNECTION = \"localhost:8080/\";\nfunction Chat() {\n  console.log();\n  const [isLoggedIn, setIsloggedIn] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const [userInfo, setUserInfo] = useState({});\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socket = io(CONNECTION);\n  }, [CONNECTION]);\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      console.log(data);\n      setMessageList([...messageList, data]);\n    });\n  }, []);\n\n  const roomConnection = () => {\n    socket.emit(\"join\", room, userInfo.username);\n    console.log(room, messageList, userInfo.username);\n    setIsloggedIn(true);\n  };\n  const sendMessage = async () => {\n    let messageContent = {\n      room: room,\n      content: {\n        username: userInfo.username,\n        message: message,\n        owner: userInfo,\n      },\n    };\n\n    // send message\n\n    await socket.emit(\"send_message\", messageContent);\n    setMessageList([...messageList, messageContent.content]);\n  };\n\n  //receive message\n\n  // const getMessage = async () => {\n  //   const response = await fetch(\"http://localhost:8080/message\");\n  //   const messages = await response.json();\n  //   console.log(messages);\n  //   setMessages(messages);\n  // };\n  console.log(messages);\n  const authToken = sessionStorage.getItem(\"authToken\");\n\n  const reqOptions = {\n    headers: {\n      authorization: `Bearer ${authToken}`,\n    },\n  };\n  // const getProfile = async () => {\n  //   const response = await fetch(\n  //     \"http://localhost:8080/user/profile\",\n  //     reqOptions\n  //   );\n\n  //   const userInfo = await response.json();\n\n  //   setUserInfo(userInfo);\n  // };\n  //useEffect(() => {\n  // getProfile();\n  //getMessage();\n  //}, []);\n\n  return (\n    <>\n      <div className=\"App\">\n        {!isLoggedIn ? (\n          <div className=\"logIn\">\n            <div className=\"inputs\">\n              <input\n                type=\"text\"\n                placeholder=\"Name...\"\n                onChange={(e) => {\n                  setUsername(e.target.value);\n                }}\n              />\n              <input\n                type=\"text\"\n                placeholder=\"Room...\"\n                onChange={(e) => {\n                  setRoom(e.target.value);\n                }}\n              />\n            </div>\n            <button onClick={connectToRoom}>Enter Chat</button>\n          </div>\n        ) : (\n          <div className=\"chatContainer\">\n            <div className=\"messages\">\n              {messageList.map((val, key) => {\n                return (\n                  <div\n                    className=\"messageContainer\"\n                    id={val.username == username ? \"You\" : \"Other\"}\n                  >\n                    <div className=\"messageIndividual\">\n                      {val.username}: {val.message}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <div className=\"messageInputs\">\n              <input\n                type=\"text\"\n                placeholder=\"Message...\"\n                onChange={(e) => {\n                  setMessage(e.target.value);\n                }}\n              />\n              <button onClick={sendMessage}>Send</button>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}