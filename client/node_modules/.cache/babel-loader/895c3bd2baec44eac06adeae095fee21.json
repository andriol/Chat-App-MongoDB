{"ast":null,"code":"var _jsxFileName = \"/Users/andrioljaupaj/Desktop/Chat-App-MongoDB/client/src/components/chat/chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport ReactScrollableFeed from \"react-scrollable-feed\";\nimport \"./chat.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst CONNECTION = \"localhost:8080/\";\n\nconst Chat = _ref => {\n  _s();\n\n  let {\n    props\n  } = _ref;\n  console.log(props);\n  console.log();\n  const [isLoggedIn, setIsloggedIn] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const [userInfo, setUserInfo] = useState({});\n  const [messages, setMessages] = useState([]);\n  console.log(messages);\n  console.log(userInfo.room);\n  useEffect(() => {\n    socket = io(CONNECTION);\n  }, [CONNECTION]);\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      console.log(data);\n      setMessageList([...messageList, data]);\n    });\n  }, []);\n\n  const roomConnection = () => {\n    setIsloggedIn(true);\n    socket.emit(\"join\", userInfo.room);\n  };\n\n  const sendMessage = async () => {\n    let messageContent = {\n      room: userInfo.room,\n      content: {\n        username: userInfo.username,\n        message: message,\n        owner: userInfo // gets user's info\n\n      }\n    }; // send message\n\n    await socket.emit(\"send_message\", messageContent);\n    setMessageList([...messageList, messageContent.content]);\n  }; //receive message\n\n\n  const getMessage = async () => {\n    const response = await fetch(\"http://localhost:8080/message\");\n    const messages = await response.json();\n    console.log(messages);\n    setMessages(messages);\n  };\n\n  useEffect(() => {\n    getMessage();\n  }, []);\n  const authToken = sessionStorage.getItem(\"authToken\");\n  const reqOptions = {\n    headers: {\n      authorization: `Bearer ${authToken}`\n    }\n  };\n\n  const getProfile = async () => {\n    const response = await fetch(\"http://localhost:8080/user/profile\", reqOptions);\n    const userInfo = await response.json();\n    setUserInfo(userInfo);\n  };\n\n  useEffect(() => {\n    getProfile();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logIn\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: roomConnection,\n        children: \"Enter Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(ReactScrollableFeed, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: [messages.map(msg => {\n            console.log(msg);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"messageList\",\n              id: msg.username == userInfo.username ? \"You\" : \"Other\",\n              children: [msg.username, \": \", msg.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this);\n          }), messageList.map((val, key) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"messageContainer\",\n              id: val.username == userInfo.username ? \"You\" : \"Other\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"messageIndividual\",\n                children: [val.username, \": \", val.message]\n              }, val.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messageInputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Message...\",\n          onChange: e => {\n            setMessage(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"/7GcGbBPrR/qns01PgFz6C2JUn0=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/andrioljaupaj/Desktop/Chat-App-MongoDB/client/src/components/chat/chat.js"],"names":["React","useState","useEffect","io","ReactScrollableFeed","socket","CONNECTION","Chat","props","console","log","isLoggedIn","setIsloggedIn","room","setRoom","message","setMessage","username","setUsername","messageList","setMessageList","userInfo","setUserInfo","messages","setMessages","on","data","roomConnection","emit","sendMessage","messageContent","content","owner","getMessage","response","fetch","json","authToken","sessionStorage","getItem","reqOptions","headers","authorization","getProfile","map","msg","val","key","id","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport ReactScrollableFeed from \"react-scrollable-feed\";\nimport \"./chat.scss\";\nlet socket;\nconst CONNECTION = \"localhost:8080/\";\nconst Chat = ({ props }) => {\n  console.log(props);\n  console.log();\n  const [isLoggedIn, setIsloggedIn] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const [userInfo, setUserInfo] = useState({});\n  const [messages, setMessages] = useState([]);\n  console.log(messages);\n  console.log(userInfo.room);\n  useEffect(() => {\n    socket = io(CONNECTION);\n  }, [CONNECTION]);\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      console.log(data);\n      setMessageList([...messageList, data]);\n    });\n  }, []);\n\n  const roomConnection = () => {\n    setIsloggedIn(true);\n    socket.emit(\"join\", userInfo.room);\n  };\n  const sendMessage = async () => {\n    let messageContent = {\n      room: userInfo.room,\n      content: {\n        username: userInfo.username,\n        message: message,\n        owner: userInfo, // gets user's info\n      },\n    };\n\n    // send message\n\n    await socket.emit(\"send_message\", messageContent);\n    setMessageList([...messageList, messageContent.content]);\n  };\n\n  //receive message\n\n  const getMessage = async () => {\n    const response = await fetch(\"http://localhost:8080/message\");\n    const messages = await response.json();\n    console.log(messages);\n    setMessages(messages);\n  };\n  useEffect(() => {\n    getMessage();\n  }, []);\n  const authToken = sessionStorage.getItem(\"authToken\");\n\n  const reqOptions = {\n    headers: {\n      authorization: `Bearer ${authToken}`,\n    },\n  };\n  const getProfile = async () => {\n    const response = await fetch(\n      \"http://localhost:8080/user/profile\",\n      reqOptions\n    );\n\n    const userInfo = await response.json();\n\n    setUserInfo(userInfo);\n  };\n  useEffect(() => {\n    getProfile();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {!isLoggedIn ? (\n        <div className=\"logIn\">\n          <div className=\"inputs\">\n            {/* <input\n              type=\"text\"\n              placeholder=\"Room...\"\n              onChange={(e) => {\n                setRoom(e.target.value);\n              }}\n            /> */}\n          </div>\n          <button onClick={roomConnection}>Enter Chat</button>\n        </div>\n      ) : (\n        <div className=\"chatContainer\">\n          <ReactScrollableFeed>\n            <div className=\"messages\">\n              {messages.map((msg) => {\n                console.log(msg);\n                return (\n                  <div\n                    className=\"messageList\"\n                    id={msg.username == userInfo.username ? \"You\" : \"Other\"}\n                  >\n                    {msg.username}: {msg.message}\n                  </div>\n                );\n              })}\n              {messageList.map((val, key) => {\n                return (\n                  <div\n                    className=\"messageContainer\"\n                    id={val.username == userInfo.username ? \"You\" : \"Other\"}\n                  >\n                    <div className=\"messageIndividual\" key={val.id}>\n                      {val.username}: {val.message}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </ReactScrollableFeed>\n          <div className=\"messageInputs\">\n            <input\n              type=\"text\"\n              placeholder=\"Message...\"\n              onChange={(e) => {\n                setMessage(e.target.value);\n              }}\n            />\n            <button onClick={sendMessage}>Send</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}