{"ast":null,"code":"var _jsxFileName = \"/Users/andrioljaupaj/Desktop/chat-app/client/src/components/chat/chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport ReactScrollableFeed from \"react-scrollable-feed\";\nimport \"./chat.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst CONNECTION = \"localhost:8080/\";\n\nfunction Chat() {\n  _s();\n\n  console.log();\n  const [isLoggedIn, setIsloggedIn] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [messageList, setMessageList] = useState([]); //const [userInfo, setUserInfo] = useState({});\n  //const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socket = io(CONNECTION);\n  }, [CONNECTION]);\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      console.log(data);\n      setMessageList([...messageList, data]);\n    });\n  });\n\n  const roomConnection = () => {\n    setIsloggedIn(true);\n    socket.emit(\"join\", room);\n  };\n\n  const sendMessage = async () => {\n    let messageContent = {\n      room: room,\n      content: {\n        username: username,\n        message: message //owner: userInfo,\n\n      }\n    }; // send message\n\n    await socket.emit(\"send_message\", messageContent);\n    setMessageList([...messageList, messageContent.content]);\n  }; //receive message\n  // const getMessage = async () => {\n  //   const response = await fetch(\"http://localhost:8080/message\");\n  //   const messages = await response.json();\n  //   console.log(messages);\n  //   setMessages(messages);\n  // };\n\n\n  const authToken = sessionStorage.getItem(\"authToken\");\n  const reqOptions = {\n    headers: {\n      authorization: `Bearer ${authToken}`\n    }\n  };\n\n  const getProfile = async () => {\n    const response = await fetch(\"http://localhost:8080/user/profile\", reqOptions);\n    const userInfo = await response.json(); //setUserInfo(userInfo);\n    //setUsername(userInfo.username);\n  };\n\n  useEffect(() => {//getProfile();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logIn\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name...\",\n          onChange: e => {\n            setUsername(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Room...\",\n          onChange: e => {\n            setRoom(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: roomConnection,\n        children: \"Enter Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messageList.map((val, key) => {\n          console.log(val);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messageContainer\",\n            id: val.username == username ? \"You\" : \"Other\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"messageIndividual\",\n              children: [val.username, \": \", val.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messageInputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Message...\",\n          onChange: e => {\n            setMessage(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"TRRaAPAddsZEgibauNDAuDqmJH0=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/andrioljaupaj/Desktop/chat-app/client/src/components/chat/chat.js"],"names":["React","useState","useEffect","io","ReactScrollableFeed","socket","CONNECTION","Chat","console","log","isLoggedIn","setIsloggedIn","room","setRoom","message","setMessage","username","setUsername","messageList","setMessageList","on","data","roomConnection","emit","sendMessage","messageContent","content","authToken","sessionStorage","getItem","reqOptions","headers","authorization","getProfile","response","fetch","userInfo","json","e","target","value","map","val","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAO,aAAP;;AACA,IAAIC,MAAJ;AACA,MAAMC,UAAU,GAAG,iBAAnB;;AACA,SAASC,IAAT,GAAgB;AAAA;;AACdC,EAAAA,OAAO,CAACC,GAAR;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C,CANc,CAOd;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,GAAGF,EAAE,CAACG,UAAD,CAAX;AACD,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,CAACe,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;AACrCb,MAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ;AACAF,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBG,IAAjB,CAAD,CAAd;AACD,KAHD;AAID,GALQ,CAAT;;AAOA,QAAMC,cAAc,GAAG,MAAM;AAC3BX,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAN,IAAAA,MAAM,CAACkB,IAAP,CAAY,MAAZ,EAAoBX,IAApB;AACD,GAHD;;AAIA,QAAMY,WAAW,GAAG,YAAY;AAC9B,QAAIC,cAAc,GAAG;AACnBb,MAAAA,IAAI,EAAEA,IADa;AAEnBc,MAAAA,OAAO,EAAE;AACPV,QAAAA,QAAQ,EAAEA,QADH;AAEPF,QAAAA,OAAO,EAAEA,OAFF,CAGP;;AAHO;AAFU,KAArB,CAD8B,CAU9B;;AAEA,UAAMT,MAAM,CAACkB,IAAP,CAAY,cAAZ,EAA4BE,cAA5B,CAAN;AACAN,IAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBO,cAAc,CAACC,OAAhC,CAAD,CAAd;AACD,GAdD,CAzBc,CAyCd;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAMC,SAAS,GAAGC,cAAc,CAACC,OAAf,CAAuB,WAAvB,CAAlB;AAEA,QAAMC,UAAU,GAAG;AACjBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASL,SAAU;AAD5B;AADQ,GAAnB;;AAKA,QAAMM,UAAU,GAAG,YAAY;AAC7B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oCAD0B,EAE1BL,UAF0B,CAA5B;AAKA,UAAMM,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB,CAN6B,CAQ7B;AACA;AACD,GAVD;;AAWAnC,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACG,CAACQ,UAAD,gBACC;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,SAFd;AAGE,UAAA,QAAQ,EAAG4B,CAAD,IAAO;AACfrB,YAAAA,WAAW,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD;AALH;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,SAFd;AAGE,UAAA,QAAQ,EAAGF,CAAD,IAAO;AACfzB,YAAAA,OAAO,CAACyB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD;AALH;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE;AAAQ,QAAA,OAAO,EAAElB,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAqBC;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,kBACGJ,WAAW,CAACuB,GAAZ,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7BnC,UAAAA,OAAO,CAACC,GAAR,CAAYiC,GAAZ;AACA,8BACE;AACE,YAAA,SAAS,EAAC,kBADZ;AAEE,YAAA,EAAE,EAAEA,GAAG,CAAC1B,QAAJ,IAAgBA,QAAhB,GAA2B,KAA3B,GAAmC,OAFzC;AAAA,mCAIE;AAAK,cAAA,SAAS,EAAC,mBAAf;AAAA,yBACG0B,GAAG,CAAC1B,QADP,QACmB0B,GAAG,CAAC5B,OADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,kBADF;AAUD,SAZA;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,YAFd;AAGE,UAAA,QAAQ,EAAGwB,CAAD,IAAO;AACfvB,YAAAA,UAAU,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD;AALH;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAQ,UAAA,OAAO,EAAEhB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBJ;AAAA;AAAA;AAAA;AAAA,UADF;AAsDD;;GA7HQjB,I;;KAAAA,I;AA8HT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport ReactScrollableFeed from \"react-scrollable-feed\";\nimport \"./chat.scss\";\nlet socket;\nconst CONNECTION = \"localhost:8080/\";\nfunction Chat() {\n  console.log();\n  const [isLoggedIn, setIsloggedIn] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  //const [userInfo, setUserInfo] = useState({});\n  //const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socket = io(CONNECTION);\n  }, [CONNECTION]);\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      console.log(data);\n      setMessageList([...messageList, data]);\n    });\n  });\n\n  const roomConnection = () => {\n    setIsloggedIn(true);\n    socket.emit(\"join\", room);\n  };\n  const sendMessage = async () => {\n    let messageContent = {\n      room: room,\n      content: {\n        username: username,\n        message: message,\n        //owner: userInfo,\n      },\n    };\n\n    // send message\n\n    await socket.emit(\"send_message\", messageContent);\n    setMessageList([...messageList, messageContent.content]);\n  };\n\n  //receive message\n\n  // const getMessage = async () => {\n  //   const response = await fetch(\"http://localhost:8080/message\");\n  //   const messages = await response.json();\n  //   console.log(messages);\n  //   setMessages(messages);\n  // };\n  const authToken = sessionStorage.getItem(\"authToken\");\n\n  const reqOptions = {\n    headers: {\n      authorization: `Bearer ${authToken}`,\n    },\n  };\n  const getProfile = async () => {\n    const response = await fetch(\n      \"http://localhost:8080/user/profile\",\n      reqOptions\n    );\n\n    const userInfo = await response.json();\n\n    //setUserInfo(userInfo);\n    //setUsername(userInfo.username);\n  };\n  useEffect(() => {\n    //getProfile();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {!isLoggedIn ? (\n        <div className=\"logIn\">\n          <div className=\"inputs\">\n            <input\n              type=\"text\"\n              placeholder=\"Name...\"\n              onChange={(e) => {\n                setUsername(e.target.value);\n              }}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Room...\"\n              onChange={(e) => {\n                setRoom(e.target.value);\n              }}\n            />\n          </div>\n          <button onClick={roomConnection}>Enter Chat</button>\n        </div>\n      ) : (\n        <div className=\"chatContainer\">\n          <div className=\"messages\">\n            {messageList.map((val, key) => {\n              console.log(val);\n              return (\n                <div\n                  className=\"messageContainer\"\n                  id={val.username == username ? \"You\" : \"Other\"}\n                >\n                  <div className=\"messageIndividual\">\n                    {val.username}: {val.message}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"messageInputs\">\n            <input\n              type=\"text\"\n              placeholder=\"Message...\"\n              onChange={(e) => {\n                setMessage(e.target.value);\n              }}\n            />\n            <button onClick={sendMessage}>Send</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}